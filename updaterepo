#!/bin/bash

###############################################################################
#                                                                             #
#                               Configuration                                 #
#                                                                             #
###############################################################################

CLONING_REPOSITORY="https://download2.hiveos.farm/repo/binary"
CLONING_DIRECTORY="/volume1/Hive/Repo"

WGET_PATH="/usr/bin/wget"
WGET_PARAMS="-t 0 -T 20 -nv -e robots=off"
WGET_VERBOSE="-v"
WGET="${WGET_PATH} ${WGET_PARAMS}"

EXIT_NETWORK=2
EXIT_FAILURE=1
EXIT_SUCCESS=0
FALSE=0
TRUE=1

mkdir -p $CLONING_DIRECTORY
export TZ=UTC

###############################################################################
#                                                                             #
#                                  Methods                                    #
#                                                                             #
###############################################################################

function CheckRepoVer() {
    on_remote=`${WGET} -O - "${CLONING_REPOSITORY}/RepoVer"`

    exitcode=$?

    if [[ $exitcode -ne $SUCCESS ]]; then
        echo "Network Error: failed to get fetch RepoVer from target repository: exitcode: $exitcode"
        exit $EXIT_NETWORK
    fi

    if [[ ! -e $CLONING_DIRECTORY/RepoVer ]]; then
        echo "Local RepoVer is missing"
    else
        on_local=`cat "${CLONING_DIRECTORY}/RepoVer"`

        if [[ $on_remote == $on_local ]]; then
            echo "RepoVer is up to date"

            return
        fi
    fi

    echo "Updating RepoVer"
    echo "$on_remote" > "${CLONING_DIRECTORY}/RepoVer"
}

function CheckInRelease() {
    on_remote=`${WGET} -O - "${CLONING_REPOSITORY}/InRelease"`

    exitcode=$?

    if [[ $exitcode -ne $SUCCESS ]]; then
        echo "Network Error: failed to get fetch InRelease from target repository: exitcode: $exitcode"
        exit $EXIT_NETWORK
    fi

    if [[ ! -e $CLONING_DIRECTORY/InRelease ]]; then
        echo "Local InRelease is missing"
    else
        on_local=`cat "${CLONING_DIRECTORY}/InRelease"`

        if [[ $on_remote == $on_local ]]; then
            echo "InRelease is up to date"

            return
        fi
    fi

    echo "Updating InRelease"
    echo "$on_remote" > "${CLONING_DIRECTORY}/InRelease"
}

function DownloadFile() {
    ${WGET} -O "${CLONING_DIRECTORY}/$1" "${CLONING_REPOSITORY}/$1"
}

function ValidateCoreFile() {
    if [[ -e "${CLONING_DIRECTORY}/$1" ]]; then
        echo "Verifying core file [$1] checksum hash"

        actual=`md5sum "$CLONING_DIRECTORY/$1" 2>/dev/null | awk '{ printf $1 }'`
        expected=`grep -A 3 -m 1 "MD5Sum:" $CLONING_DIRECTORY/InRelease | grep "$1$" | awk '{ printf $1 }'`

        if [[ $actual == $expected ]]; then
            echo "Verification: OK"

            return
        else
            echo "Verification: Hash mismatch: actual: $actual, expected: $expected"
        fi
    fi

    echo "Updating core file: [$1]"
    DownloadFile $1

    exitcode=$?
    
    if [[ $exitcode -ne 0 ]]; then
        echo "File download failed: [$1], exitcode: [$exitcode]"
        exit EXIT_NETWORK
    fi
}

function VerifyPackages() {
    while IFS="|:" read -a arr; do
        filename=${arr[1]}
        filesize=${arr[3]}
        filehash=${arr[5]}
        
        echo "[PACKAGE] $filename"

        if [[ -e "${CLONING_DIRECTORY}/$1" ]]; then
            echo "[PACKAGE] [EXISTS]"
            
            size=$(stat --format=%s "${info[Filename]}" 2>/dev/null) || size=0
            
            if [[ $filesize -ne $size ]]; then
                echo "[PACKAGE] [SIZE_MISMATCH] expected: $(( ${filesize%% *} / 1024 / 1024)) MB, on disk: $(( ${size%% *} / 1024 / 1024)) MB"
            fi
        else
            echo "[PACKAGE] [MISSING] ${CLONING_DIRECTORY}/$1"
        fi

        echo "[PACKAGE] [DOWNLOADING] $(( ${filesize%% *} / 1024 / 1024)) MB"
        DownloadFile $filename
    done < <( cat -s "${CLONING_DIRECTORY}/Packages" | grep -E "^$|^Filename|^MD5sum|^Size" | tr '\n' '|' | sed  's/||/\n/g' | tr -d ' ' )
}

###############################################################################
#                                                                             #
#                                  Utility                                    #
#                                                                             #
###############################################################################


function EchoHelp() {
    echo "${WHITE}Help:$NOCOLOR"
    echo "  Here some help."
    echo ""
}

function EchoUsage() {
    echo "${WHITE}Usage:$NOCOLOR"
    echo "  $0  -u | --update     	Make full update"
    echo "  $0  --check-repo-ver	Check current RepoVer on cloning repository"
    echo "  $0  --check-in-release	Check current InRelease on cloning repository"
    echo "  $0       --usage    	Echo usage"
    echo "  $0  -h | --help     	Echo help"
    echo ""
}
###############################################################################
#                                                                             #
#                                 Functions                                   #
#                                                                             #
###############################################################################

function Update() {
    CheckRepoVer
    CheckInRelease

    ValidateCoreFile Packages
    ValidateCoreFile Packages.gz
    ValidateCoreFile Release
    # ValidateCoreFile Release.gpg

    VerifyPackages
}

###############################################################################
#                                                                             #
#                            Command line options                             #
#                                                                             #
###############################################################################

pidof /volume1/Hive/Scripts/updaterepo.sh > /dev/null && {
  echo "Another instance of updaterepo is already running"
  exit 1
}

case "$1" in
	--check-repo-ver)
		CheckRepoVer

		exit $EXIT_SUCCESS
		;;

	-u|--update)
		Update

		exit $EXIT_SUCCESS
		;;

	--check-in-release)
		CheckInRelease

		exit $EXIT_SUCCESS
		;;

    -h|--help)
        EchoHelp
        EchoUsage

        exit $EXIT_SUCCESS
        ;;

	--usage)
        EchoUsage

		exit $EXIT_SUCCESS
		;;

	*)
		echo "${YELLOW}Unknown option. Use -h for help $NOCOLOR"
		exit $EXIT_FAILURE
		;;
esac

###############################################################################
#                                                                             #
#                                  END                                        #
#                                                                             #
###############################################################################

exit
